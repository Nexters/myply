// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"fmt"
	"github.com/Nexters/myply/infrastructure/configs"
	"github.com/Nexters/myply/infrastructure/logger"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"go.uber.org/zap"
)

import (
	_ "github.com/Nexters/myply/docs"
)

// Injectors from server.go:

func New() (*fiber.App, error) {
	config := configs.NewConfig()
	sugaredLogger := logger.NewLogger(config)
	app := NewServer(config, sugaredLogger)
	return app, nil
}

// server.go:

// @title MYPLY SERVER
// @version 1.0
// @description This is a sample swagger for Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email minkj1992@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
func NewServer(config *configs.Config, logger2 *zap.SugaredLogger) *fiber.App {
	logger2.
		Infof("Configuration settings\n%+v", config)

	app := fiber.New()

	app.Get("/swagger/*", swagger.HandlerDefault)
	app.Get("/swagger/*", swagger.New(swagger.Config{
		URL:         "http://example.com/doc.json",
		DeepLinking: false,

		DocExpansion: "none",
	}))
	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString(fmt.Sprintf("[%s] Hello, myply ✈️", config.Phase))
	})

	return app
}
